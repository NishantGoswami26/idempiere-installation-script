<VirtualHost *:80>
    ProxyPreserveHost On
    ServerName idempiere_http

    # Servers to proxy the connection, or;
    # List of application servers:
    # Usage:
    # ProxyPass / http://[IP Addr.]:[port]/
    # ProxyPassReverse / http://[IP Addr.]:[port]/
    # Example:
    RewriteEngine on
    RewriteRule ^/(.*) https://%{HTTP_HOST}/$1 [R,L]

    ServerName localhost

# NOTE: You can use https://certbot.eff.org/ to get a free ssl certificate - very nice!!
    # Do not allow it to redirect all traffic - doing so overwrites the phppgadmin config file.
    # Instead, 
        # uncomment the following Rewrite statements to force all traffic to https.
        # change YOUR.URL.COM to your url you wish to use for https
# RewriteEngine on
# RewriteCond %{SERVER_NAME} =localhost [OR]
# RewriteCond %{SERVER_NAME} =YOUR.URL.COM
# RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
</VirtualHost>

<IfModule mod_ssl.c>
	<VirtualHost *:443>
		ServerName idempiere_https

		RewriteEngine on
		ProxyRequests Off
		SSLProxyEngine On
		SSLProxyVerify none
		SSLProxyCheckPeerCN off
		SSLProxyCheckPeerName off
		SSLProxyCheckPeerExpire off

		ErrorLog ${APACHE_LOG_DIR}/error.log
		CustomLog ${APACHE_LOG_DIR}/access.log combined

		ProxyPass / https://0.0.0.0:8443/
		ProxyPassReverse / https://0.0.0.0:8443/

		SetEnvIf Host "^(.*)$" THE_HOST=$1
		RequestHeader setifempty X-Forwarded-Proto https
		RequestHeader setifempty X-Forwarded-Host %{THE_HOST}e
		ProxyAddHeaders Off

		SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt
		SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key

	</VirtualHost>
</IfModule>

### NOTE: the below ssl instructions are out of date; however, keeping for future reference.
### NOTE: use the above https://certbot.eff.org/ instructions instead
### to enable ssl, 
###  - uncomment the below virtualhost session
###  - create a directory named /etc/apache2/ssl/
###  - follow these instructions in your new directory http://www.akadia.com/services/ssh_test_certificate.html
#######  - sudo mkdir /etc/apache2/ssl
#######  - cd /etc/apache2/ssl
#######  - sudo openssl genrsa -des3 -out server.key 1024
#######  - sudo openssl req -new -key server.key -out server.csr
#######  - sudo cp server.key server.key.org
#######  - sudo openssl rsa -in server.key.org -out server.key
#######  - sudo openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
#<VirtualHost *:443>
#    ProxyPreserveHost On
#    SSLEngine On
#    SSLProxyEngine On
#    SSLCertificateFile /etc/apache2/ssl/server.crt
#    SSLCertificateKeyFile /etc/apache2/ssl/server.key
#    ProxyPass / http://0.0.0.0:8080/
#    ProxyPassReverse / http://0.0.0.0:8080/
#</VirtualHost>

### NOTE: the following is still valid; however, I have not tested it with the above https://certbot.eff.org/ instructions.
### to enable ssl with authentication - NOTE: only use one ssl option, 
###  - uncomment the below virtualhost session
###  - Follow the above SSL directions to create your own test cert/key
#<VirtualHost *:443>
#    ErrorLog /var/log/apache2/iDempiereProxy.error.log
#    LogLevel info
#    CustomLog /var/log/apache2/iDempiereProxy.log combined
#    # which db
#    DBDriver pgsql
#    DBDParams "host=localhost port=5432 user=adempiere password=YOUR_PASSWORD_HERE dbname=idempiere"
#    #Connection Pool Management
#    DBDMin 1
#    DBDKeep 2
#    DBDMax 10
#    DBDExptime 60
#    <Proxy *>
#        # core authentication and mod_auth_basic configuration
#        # for mod_authn_dbd
#        AuthType Basic
#        AuthName "Backend auth name"
#        AuthBasicProvider dbd
#        # core authorization configuration
#        Require valid-user
#        # mod_authn_dbd SQL query to authenticate a user
#        AuthDBDUserPWQuery \
#        "SELECT '{SHA}'||encode(digest(password,'sha1'),'base64') as password FROM ad_user WHERE exists (select * from ad_user_roles where ad_user_id = ad_user.ad_user_id) and name = %s"
#        AddDefaultCharset Off
#        Order deny,allow
#        Allow from all
#    </Proxy>
#    ProxyPreserveHost On
#    SSLEngine On
#    SSLProxyEngine On
#    SSLCertificateFile /etc/apache2/ssl/server.crt
#    SSLCertificateKeyFile /etc/apache2/ssl/server.key
#    ProxyPass / http://0.0.0.0:8080/
#    ProxyPassReverse / http://0.0.0.0:8080/
#    TimeOut 50400
#</VirtualHost>
